{"version":3,"sources":["code/GameOfLife.js","components/Cell.js","components/Board.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["GameOfLife","board","this","initialStateValid","Error","currentState","largestYCoordinate","length","largestXCoordinate","futureState","turns","resetFutureState","forEach","rowsConsistentLength","row","i","y","cell","x","isCellAlive","futureValue","shouldCellDie","push","shouldCellBecomeAlive","neighbours","numberOfLivingNeighbours","aliveNeighboursCount","vector","neighbourX","neighbourY","lifeFound","console","log","Cell","status","toggleCellState","onClick","className","Board","cells","boardsCells","map","yRowNumber","xColumnNumber","key","Game","props","componentDidUpdate","anyLifePresent","state","automaticModeOn","clearInterval","interval","setState","isLifePresent","undefined","toggleAutomaticMode","setInterval","takeTurn","game","searchForAnyLife","newGame","seedLife","newBoard","j","Math","random","setupBoard","getGameModeLogo","getButtonClasses","getPlayButtonText","role","aria-label","data-testid","type","value","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ef88eba0.chunk.js","sourcesContent":["class GameOfLife {\n\n  setupBoard(board){\n    if (!this.initialStateValid(board)) {\n      throw new Error('Make sure the supplied board is a 2D array, with consistent row lengths');\n    }\n\n    this.currentState = board;\n    this.largestYCoordinate = board.length - 1;\n    this.largestXCoordinate = board[0].length - 1;\n    this.futureState = [];\n    this.turns = 0;\n\n    this.resetFutureState();\n  }\n\n  initialStateValid(board){\n    if( !board || typeof board !== 'object' || board.length < 2){\n      //board absent, not likely to be array, or has less than 2 rows\n      return false;\n    }\n\n    if (!board.forEach){\n      //object is an actual object, not an array\n      return false;\n    }\n\n    //check for consistent row length\n    let rowsConsistentLength = true;\n    board.forEach( row => {\n      rowsConsistentLength = (row.length !== board[0].length) ? false : rowsConsistentLength;\n    })\n\n    return rowsConsistentLength;\n  }\n\n  resetFutureState(){\n    this.futureState = [];\n    for(let i=0; i <= this.largestYCoordinate; i++){\n      this.futureState[i] = [];\n    }\n  }\n\n  takeTurn(){\n\n    this.currentState.forEach( (row, y) => {\n      row.forEach( (cell, x) => {\n          //cycle through every position (x,y) in the board\n          if(this.isCellAlive(x,y)){\n            //position is alive, should it die?\n            const futureValue = this.shouldCellDie(x,y) ? 0 : 1;\n            this.futureState[y].push(futureValue);\n          } else {\n            //position is dead, should it become alive?\n            const futureValue = this.shouldCellBecomeAlive(x,y) ? 1 : 0;\n            this.futureState[y].push(futureValue);\n          }\n      })\n    })\n\n    this.currentState = this.futureState;\n    this.turns += 1;\n    this.resetFutureState()\n  }\n\n  shouldCellDie(x,y){\n\n    const neighbours = this.numberOfLivingNeighbours(x,y);\n\n    /*\n    Return true, die, if fewer than two OR more than 3 neighbours.\n    Otherwise, false; don't die.\n    */\n    return neighbours < 2 || neighbours > 3;\n  }\n\n  shouldCellBecomeAlive(x,y){\n    const neighbours = this.numberOfLivingNeighbours(x,y);\n    /*\n    Return true, live if exactly 3 neighbours.\n    Otherwise, false; don't live.\n    */\n    return neighbours === 3;\n  }\n\n  numberOfLivingNeighbours(x,y){\n    const neighbourVectors = [\n      [1,1],\n      [1,0],\n      [0,1],\n      [-1,1]\n    ];\n\n    let aliveNeighboursCount = 0;\n\n    neighbourVectors.forEach( vector => {\n      for (let i=-1; i <=1; i++){\n        if(i!==0){\n          /*\n            for and if loops cause positons -1 and +1, but not 0, along the vectors\n            be considered neighbours and be tested for live\n          */\n\n          const neighbourX = x + vector[0]*i;\n          const neighbourY = y + vector[1]*i;\n\n          if( neighbourY >= 0 && neighbourX >= 0 && neighbourY <= this.largestYCoordinate && neighbourX <= this.largestXCoordinate){\n            //coordinates are in bounds; is a valid neighbour\n            if (this.isCellAlive(neighbourX, neighbourY)){\n              aliveNeighboursCount += 1;\n            }\n          }\n\n        }\n      }\n    })\n\n    return aliveNeighboursCount;\n  }\n\n  isCellAlive(x,y){\n    /*\n      if the project changes to use something other than 1 and 0 to indicate life,\n      this is place to reflect that change\n    */\n    return this.currentState[y][x] === 1;\n  }\n\n  searchForAnyLife(){\n    let lifeFound = false;\n    this.currentState.forEach( row => {\n      row.forEach( cell => {\n          lifeFound = cell ? true : lifeFound;\n      })\n    })\n    return lifeFound;\n  }\n\n  printBoard(){\n    this.currentState.forEach(row => {\n      console.log(row);\n    })\n  }\n}\n\nexport default GameOfLife;\n","import React from 'react';\nimport './Cell.css';\n\nconst Cell = ({ status, toggleCellState}) => {\n    const getClassName = () => {\n        return !!status ? 'alive' : 'dead';\n    }\n\n    return (\n        <div\n            onClick={toggleCellState}\n            className={`cell ${getClassName()}`}\n        >\n        </div>\n    );\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nconst Board = ({ cells, toggleCellState}) => {\n    \n    const boardsCells = () => {\n\n        let boardsCells = cells.map((row, yRowNumber) => {\n            let cells = [];\n            row.forEach((cell, xColumnNumber) => {\n                cells.push(<Cell key={`cell-${yRowNumber}-${xColumnNumber}`} status={cell} toggleCellState={() => { toggleCellState(xColumnNumber, yRowNumber) }} />)\n            });\n            return cells;\n        })\n\n        return boardsCells;\n    }\n\n    return (\n        <div className=\"board\">\n            {boardsCells()}\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\nimport './Game.css';\n\nimport GameOfLife from '../code/GameOfLife.js';\nimport Board from './Board';\n\n\nclass Game extends React.Component {\n    \n    constructor(props){\n        super(props)\n        \n        let game = new GameOfLife();\n        let boardStartingState = [\n            [0, 0, 0, 0, 0, 1, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n            [1, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n            [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n            [0, 0, 0, 1, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [1, 0, 1, 0, 0, 0, 1, 0, 0, 0],\n            [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]\n        ]\n        game.setupBoard(boardStartingState);\n\n        this.state = {\n            game: game,\n            isLifePresent: true,\n            automaticModeOn : false,\n            interval: undefined\n        }\n    }\n\n    componentDidUpdate = () =>{\n        if(!this.anyLifePresent()){\n            if(this.state.automaticModeOn){\n                //stop automatic mode\n                clearInterval(this.state.interval); //stop the interval\n                this.setState({\n                    isLifePresent: false,\n                    interval: undefined,\n                    automaticModeOn: false\n                });\n            }\n        }\n    }\n\n    toggleAutomaticMode = () => {\n        if (!this.state.automaticModeOn){\n            let interval = setInterval(this.takeTurn, 500);\n            this.setState({\n                interval: interval,\n                automaticModeOn: true\n            });\n        } else {\n            clearInterval(this.state.interval); //stop the interval\n            this.setState({\n                interval: undefined,\n                automaticModeOn: false\n            });\n        }\n    }\n\n    anyLifePresent = () =>{\n        return this.state.game.searchForAnyLife();\n    }\n\n    toggleCellState = (x,y) =>{\n        let newGame = this.state.game;\n        let state = newGame.currentState[y][x];\n        newGame.currentState[y][x] = state === 1 ? 0 : 1;\n        this.setState({ game: newGame });\n    }\n\n    takeTurn = () =>{\n        let game = this.state.game;\n        game.takeTurn();\n        this.setState({game: game});\n    }\n\n    seedLife = () =>{\n        let newBoard = this.state.game.currentState;\n\n        for (let i = 0; i < this.state.game.currentState.length; i++) {\n            for (let j = 0; j < this.state.game.currentState[i].length; j++) {\n                newBoard[i][j] = (Math.random() > 0.5) ? 1 : 0;;\n            }\n        }\n        let newGame = new GameOfLife();\n        newGame.setupBoard(newBoard);\n        // this.setState({ ...this.state.game, currentState: newGame.currentState });\n        this.setState({\n            game: newGame,\n            isLifePresent: true        \n        });\n    }\n\n    getGameModeLogo = () => {\n        return (this.state.automaticModeOn ? 'pause' : 'play');\n    }\n\n    getButtonClasses = () => {\n        return (this.state.automaticModeOn ? 'ui button disabled' : 'ui button');\n    }\n\n    getPlayButtonText = () => {\n        return this.state.automaticModeOn ? \"Pause & swap to manual mode\" : \"Start automatic mode\";\n    }\n\n    render() {\n        return (\n            <div className=\"game center-content\">\n                <div className=\"stats\">\n                    <p>\n                        {`Turns : ${this.state.game.turns}`}\n                    </p>\n                    <p className={!this.state.isLifePresent ? \"visible\" : \"hidden\"}>\n                        All your cells died <span role=\"img\" aria-label=\"crying emoji\">😭</span>\n                    </p>\n                </div>\n                <div className=\"mb-3\">\n                    <Board cells={this.state.game.currentState} toggleCellState={this.toggleCellState} />\n                </div>\n                <div className=\"controls center-content\">\n                    <h4 className=\"ui horizontal divider header\">\n                        <i className=\"sliders horizontal icon\"></i>\n                        Controls\n                    </h4>\n                    <div className=\"mb-1\">\n                        <button\n                            className={`ui labeled icon button ${this.state.isLifePresent ? \"\" : \"disabled\"}`}\n                            onClick={this.toggleAutomaticMode}\n                        >\n                            <i className={`${this.getGameModeLogo()} icon`}></i>\n                            {this.getPlayButtonText()}\n                        </button>\n                    </div>\n                    <div className=\"mb-1\">\n                        <input className={this.getButtonClasses()} data-testid=\"take-turn\" type=\"button\" onClick={this.takeTurn} value=\"Click to take 1 turn\"></input>\n                        <input className={this.getButtonClasses()} data-testid=\"seed-life\" type=\"button\" onClick={this.seedLife} value=\"Reset game\"></input>\n                    </div>\n                    <div className=\"ui card\">\n                        <div className=\"content\">\n                            Use the controls above to run the game in automatic or manual mode. Click on cells to toggle alive/dead, or click 'Reset game' to seed life throughout the board.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nclass App extends React.Component {\n  render(){\n    return(\n      <div className=\"app center-content\">\n        <h1>Game of Life</h1>\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}